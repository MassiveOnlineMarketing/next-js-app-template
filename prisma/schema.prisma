// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  loginProvider         String?
  refreshToken          String?                @db.Text
  credits               Int                    @default(10)

  stripeCustomerId       String?                @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?                @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?                @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?              @map(name: "stripe_current_period_end")
  website                Website[]
  GoogleSearchCampaign   GoogleSearchCampaign[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  userId  String?
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Website {
  id          String   @id @default(cuid())
  userId      String
  websiteName String
  domainUrl   String
  gscUrl      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  googleResultFilter   GoogleResultFilter[]
  googleSearchCampaign GoogleSearchCampaign[]
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GoogleSearchCampaign {
  id           String                      @id @default(cuid())
  userId       String
  websiteId    String
  campaignName String
  domainUrl    String
  language     String
  languageCode String
  country      String
  location     String?
  locationCode String
  gscUrl       String?
  refreshDays  DayOfWeek[]
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
  keyword      GoogleSearchKeyword[]
  results      GoogleSearchProjectResult[]
  competitor   GoogleSearchCompetitor[]

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id])
}

model GoogleSearchCompetitor {
  id                     String   @id @default(cuid())
  googleSearchCampaignId String
  domainUrl              String
  // competitorName        String
  createdAt              DateTime @default(now())

  googleSearchCampaign         GoogleSearchCampaign           @relation(fields: [googleSearchCampaignId], references: [id], onDelete: Cascade)
  googleSearchCompetitorResult GoogleSearchCompetitorResult[]
}

model GoogleSearchCompetitorResult {
  id                       String   @id @default(cuid())
  googleSearchCompetitorId String
  keywordId                String
  position                 Int?
  url                      String?
  metaTitle                String?
  metaDescription          String?
  createdAt                DateTime @default(now())
  googleSearchCampaignId   String

  googleSearchCompetitor GoogleSearchCompetitor @relation(fields: [googleSearchCompetitorId], references: [id], onDelete: Cascade)
}

model GoogleSearchProjectResult {
  id                     String   @id @default(cuid())
  googleSearchCampaignId String
  improved               Int
  worsened               Int
  total                  Int
  topThree               Int
  topTen                 Int
  topHundred             Int
  noChange               Int
  notFound               Int
  averagePosition        Int
  createdAt              DateTime @default(now())

  googleSearchCampaign GoogleSearchCampaign @relation(fields: [googleSearchCampaignId], references: [id], onDelete: Cascade)
}

model GoogleSearchKeyword {
  id                     String   @id @default(cuid())
  googleSearchCampaignId String
  keyword                String
  createdAt              DateTime @default(now())

  googleSearchCampaign GoogleSearchCampaign      @relation(fields: [googleSearchCampaignId], references: [id], onDelete: Cascade)
  googleSerpResult     GoogleSearchSerpResult[]
  result               GoogleSearchResult[]
  tags                 GoogleSearchKeywordTag[]
  keywordMetrics       GoogleAdsKeywordMetrics[]
}

model GoogleSearchSerpResult {
  id              String   @id @default(cuid())
  keywordId       String
  position        Int
  url             String
  metaTitle       String
  metaDescription String
  createdAt       DateTime @default(now())

  keyword GoogleSearchKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
}

model GoogleSearchResult {
  id              String   @id @default(cuid())
  keywordId       String
  keywordName     String
  position        Int?
  url             String?
  metaTitle       String?
  metaDescription String?
  firstPosition   Int?
  bestPosition    Int?
  latestChange    Int?
  createdAt       DateTime @default(now())

  relatedSearches Json?
  peopleAlsoAsk   Json?
  sitelinks       Json?

  keyword GoogleSearchKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
}

model GoogleSearchKeywordTag {
  id       String                @id @default(cuid())
  name     String                @unique
  keywords GoogleSearchKeyword[]
}

model GoogleAdsKeywordMetrics {
  id                    String @id @default(cuid())
  googleSearchKeywordId String

  avgMonthlySearches String?
  competition        String?
  competitionIndex   String?
  highTopOfPageBid   String?
  lowTopOfPageBid    String?

  createdAt DateTime @default(now())

  keyword GoogleSearchKeyword @relation(fields: [googleSearchKeywordId], references: [id], onDelete: Cascade)
}

model NieuwsbriefSignup {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

// Google Result Filter

model GoogleResultFilter {
  id        String                  @id @default(cuid())
  name      String
  urls      GoogleResultFilterURL[]
  Website   Website                 @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId String
}

model GoogleResultFilterURL {
  id       String             @id @default(cuid())
  url      String
  filter   GoogleResultFilter @relation(fields: [filterId], references: [id], onDelete: Cascade)
  filterId String
}
